from telethon.sync import TelegramClient
import asyncio
from datetime import datetime, timedelta, timezone
import openai
import time
from aiogram import Bot, Dispatcher, Router
from aiogram.types import BotCommand, Message
from aiogram.filters import Command
from dataclasses import dataclass

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
@dataclass
class TgBot:
    token: str  # –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—É

@dataclass
class Config:
    tg_bot: TgBot

def load_config(path: str | None = None) -> Config:
    return Config(tg_bot=TgBot(token=''))

config = load_config()
bot = Bot(token=config.tg_bot.token)

# Initialize module-level router
router = Router()



client = TelegramClient(phone, api_id, api_hash)

messages_dict = {}

async def main():
    config: Config = load_config()
    bot = Bot(token=config.tg_bot.token)
    dp = Dispatcher()

    dp.include_router(router)

    # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
    @router.message(Command(commands=["start"]))
    async def process_start_command(message: Message):
        await message.answer(
            text='–≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ SEO —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–æ–≤'
        )

    # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
    @router.message(Command(commands=["getnews"]))
    async def process_start_command(message: Message):
        for url in messages_dict:
            await message.answer(text=f"–°—Å—ã–ª–∫–∞: {url}\n\n {messages_dict[url]}\n\n"
            )

    try:
        await client.start()
        print("Client started successfully")

        me = await client.get_me()
        print(f"Logged in as {me.username}")

        dialogs = await client.get_dialogs()
        print(f"Retrieved {len(dialogs)} dialogs")

        one_day_ago = datetime.now(timezone.utc) - timedelta(days=1)

        global messages_dict

        my_groups = ('–ê–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–µ SEO', '–ù–∏–∫–æ–ª–∞–π –ö–æ–¥–∏–π: SEO, PBN, –ì–ï–ú–ë–õ–ê, –ú–´–°–õ–ò', 'Searchengines - –Ω–æ–≤–æ—Å—Ç–∏ seo, –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Å–∞–π—Ç–æ–≤, –∫–æ–Ω—Ç–µ–∫—Å—Ç, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, digital',
                     '–õ–∞–π—Ñ—Ö–∞–∫–∏ –ø–æ SEO | –ö–∏—Ä–∏–ª–ª –†–∞–º–∏—Ä–∞—Å', 'SEO –¥–ª—è —Ä–æ–±–æ—Ç–æ–≤', 'DrMax SEO', 'SEO –±–µ–∑ –≤–æ–¥—ã', '–ê–ª–∞–∏—á–™ –ø—Ä–æ SEO, –±–∏–∑–Ω–µ—Å –∏ ‚Ä¶', 'SEO –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–µ')
        my_groups_ua = ('SEO BAZA', 'Python –¥–ª—è SEO üá∫üá¶', 'SEO inside', 'SEObox', 'Robots.txt üá∫üá¶')

        for dialog in dialogs:
            if dialog.name in my_groups or dialog.name in my_groups_ua:
                entity = await client.get_entity(dialog)
                async for message in client.iter_messages(entity):
                    message_date = message.date.replace(tzinfo=timezone.utc)
                    if message_date >= one_day_ago:
                        if hasattr(entity, 'username') and entity.username:
                            message_link = f"https://t.me/{entity.username}/{message.id}"
                        else:
                            message_link = f"https://t.me/c/{entity.id}/{message.id}"
                        messages_dict[message_link] = message.text
                        time.sleep(1)
                    else:
                        break
                    await asyncio.sleep(1)

        await client.disconnect()
        print("Client disconnected successfully")
        print(messages_dict)
        #return messages_dict

    except Exception as e:
        print(f"An error occurred: {e}")

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –∞–ø–¥–µ–π—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
